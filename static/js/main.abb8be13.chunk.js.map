{"version":3,"sources":["Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","withScriptjs","withGoogleMap","markers","setMarkers","addMarker","colorsArray","svgMarker","path","fillColor","fillOpacity","strokeWeight","rotation","scale","defaultZoom","defaultCenter","lat","lng","onClick","e","latLng","map","marker","position","icon","color","clickable","newColorIndex","indexOf","length","newMarkersArray","currMarker","id","changeMarkerColor","onRightClick","filter","removeMarker","App","appStyles","height","width","backgroundColor","LOCAL_STORAGE_KEY","defaultMarkersState","JSON","parse","window","localStorage","getItem","React","useState","_setMarkers","values","setItem","stringify","batchValue","setBatchValue","style","newMarker","Math","random","googleMapURL","loadingElement","containerElement","mapElement","minWidth","bottom","margin","left","display","justifyContent","flexDirection","textAlign","padding","borderRadius","boxShadow","marginTop","rows","resize","marginBottom","value","onChange","target","className","valueString","markerStrings","split","forEach","markerString","markerValues","push","parseFloat","addMarkers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abb8be13.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\n \r\nconst Map = withScriptjs(\r\n  withGoogleMap(({ markers, setMarkers, addMarker }) => {\r\n    const colorsArray = [\"red\", \"green\", \"blue\"];\r\n    const svgMarker = {\r\n      path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\r\n      fillColor: \"transparent\",\r\n      fillOpacity: 0.5,\r\n      strokeWeight: 0,\r\n      rotation: 0,\r\n      scale: 2,\r\n    };\r\n \r\n    const changeMarkerColor = (marker) => {\r\n      const newColorIndex =\r\n        ((colorsArray?.indexOf(marker.color) | 0) + 1) % colorsArray.length;\r\n      let newMarkersArray = markers.map((currMarker) => {\r\n        if (currMarker.id === marker.id) {\r\n          return { ...currMarker, color: colorsArray[newColorIndex] };\r\n        } else {\r\n          return currMarker;\r\n        }\r\n      });\r\n      setMarkers(newMarkersArray);\r\n    };\r\n \r\n    const removeMarker = (id) => {\r\n      let newMarkersArray = markers.filter((marker) => {\r\n        return marker.id !== id;\r\n      });\r\n      setMarkers(newMarkersArray);\r\n    };\r\n \r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={8}\r\n        defaultCenter={{ lat: 40.5, lng: -74 }}\r\n        onClick={(e) => {\r\n          addMarker(e.latLng.lat(), e.latLng.lng());\r\n        }}\r\n      >\r\n        {markers.map((marker) => {\r\n          return (\r\n            <Marker\r\n              key={marker.id}\r\n              position={{ lat: marker.lat, lng: marker.lng }}\r\n              icon={{ ...svgMarker, fillColor: marker.color }}\r\n              clickable\r\n              onClick={(e) => {\r\n                changeMarkerColor(marker);\r\n              }}\r\n              onRightClick={() => {\r\n                removeMarker(marker.id);\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </GoogleMap>\r\n    );\r\n  })\r\n);\r\n \r\nexport default Map;","import React from \"react\";\nimport Map from \"./Map\";\nconst App = () => {\n  const appStyles = {\n    height: \"100vh\",\n    width: \"100%\",\n    backgroundColor: \"#aeaeae\",\n  };\n  const LOCAL_STORAGE_KEY = \"markers\";\n  let defaultMarkersState =\n    JSON.parse(window.localStorage?.getItem(LOCAL_STORAGE_KEY)) || [];\n  const [markers, _setMarkers] = React.useState(defaultMarkersState);\n  const setMarkers = (values) => {\n    _setMarkers(values);\n    window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));\n  };\n  const [batchValue, setBatchValue] = React.useState(null);\n  const addMarker = (lat, lng, colorIndex = 0) => {\n    const newMarker = {\n      id: Math.random() * 1000,\n      lat: lat,\n      lng: lng,\n      color: \"red\",\n    };\n    let newMarkersArray = [...markers, newMarker];\n    setMarkers([...newMarkersArray]);\n  };\n  const addMarkers = (valueString) => {\n    if (!valueString) {\n      return;\n    }\n    let markerStrings = valueString.split(\"\\n\");\n    let newMarkersArray = [];\n    markerStrings.forEach((markerString) => {\n      let markerValues = markerString.split(\",\");\n      newMarkersArray.push({\n        id: Math.random() * 1000,\n        lat: parseFloat(markerValues[0]),\n        lng: parseFloat(markerValues[1]),\n        color: markerValues[2] ? markerValues[2] : \"red\",\n      });\n    });\n    setMarkers([...markers, ...newMarkersArray]);\n  };\n  return (\n    <div style={appStyles}>\n      <Map\n        addMarker={addMarker}\n        markers={markers}\n        setMarkers={setMarkers}\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBUjTS_5RvEUsxU3Pq6lya1WHJngcFnieY&v=3.exp&libraries=geometry,drawing,places\"\n        loadingElement={<div style={appStyles} />}\n        containerElement={<div style={appStyles} />}\n        mapElement={<div style={appStyles} />}\n      />\n      <div\n        style={{\n          backgroundColor: \"white\",\n          width: \"10vw\",\n          minWidth: \"15rem\",\n          position: \"absolute\",\n          bottom: \"0\",\n          margin: \"10px\",\n          left: \"0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          textAlign: \"center\",\n          padding: \"1rem\",\n          borderRadius: \"3px\",\n          boxShadow: \"rgb(0 0 0 / 30%) 0px 1px 4px -1px;\",\n        }}\n      >\n        <h2 style={{ marginTop: 0 }}>Batch Add</h2>\n        <textarea\n          rows=\"4\"\n          style={{ height: \"10rem\", resize: \"none\", marginBottom: \"1rem\" }}\n          value={batchValue}\n          onChange={(e) => {\n            setBatchValue(e.target.value);\n          }}\n        />\n        <button className=\"google\" onClick={() => addMarkers(batchValue)}>\n          Add\n        </button>\n      </div>\n    </div>\n  );\n};\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}