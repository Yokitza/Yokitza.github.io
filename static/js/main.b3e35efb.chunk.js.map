{"version":3,"sources":["Map.js","App.js","reportWebVitals.js","index.js"],"names":["Map","withScriptjs","withGoogleMap","markers","setMarkers","addMarker","setZoom","setCenter","zoom","center","colorsArray","svgMarker","path","fillColor","fillOpacity","strokeWeight","rotation","scale","defaultZoom","onZoomChanged","this","getZoom","onCenterChanged","lat","getCenter","lng","defaultCenter","onClick","e","latLng","map","marker","position","icon","color","clickable","newColorIndex","indexOf","length","newMarkersArray","currMarker","id","changeMarkerColor","onRightClick","filter","removeMarker","App","appStyles","height","width","LOCAL_STORAGE_KEY","getLocalStorage","JSON","parse","window","localStorage","getItem","defaultZoomState","defaultMarkersState","defaultCenterState","React","useState","_setZoom","_setCenter","_setMarkers","updateLocalStorage","setItem","stringify","values","batchValue","setBatchValue","style","_center","_zoom","newMarker","Math","random","googleMapURL","loadingElement","containerElement","mapElement","backgroundColor","minWidth","bottom","margin","left","display","justifyContent","flexDirection","textAlign","padding","borderRadius","boxShadow","marginTop","rows","resize","marginBottom","value","onChange","target","className","valueString","markerStrings","split","forEach","markerString","markerValues","push","parseFloat","addMarkers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3e35efb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\n\r\n//const LOCAL_STORAGE_KEY = \"zoom\";\r\n//const LOCAL_STORAGE_KEY_1 = \"center\";\r\n\r\nconst Map = withScriptjs(\r\n  withGoogleMap(\r\n    ({ markers, setMarkers, addMarker, setZoom, setCenter, zoom, center }) => {\r\n      function handleZoomChanged() {\r\n        setZoom(this.getZoom());\r\n      }\r\n\r\n      function handleCenterChanged() {\r\n        setCenter({ lat: this.getCenter().lat(), lng: this.getCenter().lng() });\r\n      }\r\n\r\n      const colorsArray = [\"red\", \"green\", \"blue\", \"yellow\"];\r\n      const svgMarker = {\r\n        path: \"M10.453 14.016l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM12 2.016q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z\",\r\n        fillColor: \"transparent\",\r\n        fillOpacity: 0.6,\r\n        strokeWeight: 0,\r\n        rotation: 0,\r\n        scale: 2,\r\n      };\r\n\r\n      const changeMarkerColor = (marker) => {\r\n        const newColorIndex =\r\n          (colorsArray.indexOf(marker.color) + 1) % colorsArray.length;\r\n        let newMarkersArray = markers.map((currMarker) => {\r\n          if (currMarker.id === marker.id) {\r\n            return { ...currMarker, color: colorsArray[newColorIndex] };\r\n          } else {\r\n            return currMarker;\r\n          }\r\n        });\r\n        setMarkers(newMarkersArray);\r\n      };\r\n      const removeMarker = (id) => {\r\n        let newMarkersArray = markers.filter((marker) => {\r\n          return marker.id !== id;\r\n        });\r\n        setMarkers(newMarkersArray);\r\n      };\r\n\r\n      return (\r\n        <GoogleMap\r\n          defaultZoom={zoom}\r\n          onZoomChanged={handleZoomChanged}\r\n          onCenterChanged={handleCenterChanged}\r\n          defaultCenter={center}\r\n          onClick={(e) => {\r\n            addMarker(e.latLng.lat(), e.latLng.lng());\r\n          }}\r\n        >\r\n          {markers.map((marker) => {\r\n            return (\r\n              <Marker\r\n                key={marker.id}\r\n                position={{ lat: marker.lat, lng: marker.lng }}\r\n                icon={{ ...svgMarker, fillColor: marker.color }}\r\n                clickable\r\n                onClick={(e) => {\r\n                  changeMarkerColor(marker);\r\n                }}\r\n                onRightClick={() => {\r\n                  removeMarker(marker.id);\r\n                }}\r\n              />\r\n            );\r\n          })}\r\n        </GoogleMap>\r\n      );\r\n    }\r\n  )\r\n);\r\n\r\nexport default Map;\r\n","import React from \"react\";\nimport Map from \"./Map\";\nconst App = () => {\n  const appStyles = {\n    height: \"100vh\",\n    width: \"100%\",\n  };\n  const LOCAL_STORAGE_KEY = \"mapmarker\";\n  const getLocalStorage = () => {\n    return JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY));\n  };\n  let defaultZoomState = getLocalStorage()?.zoom || 8;\n  let defaultMarkersState = getLocalStorage()?.markers || [];\n  let defaultCenterState = getLocalStorage()?.center || {\n    lat: 40.5,\n    lng: -74.5,\n  };\n  const [zoom, _setZoom] = React.useState(defaultZoomState);\n  const [center, _setCenter] = React.useState(defaultCenterState);\n  const [markers, _setMarkers] = React.useState(defaultMarkersState);\n\n  const updateLocalStorage = () => {\n    window.localStorage.setItem(\n      LOCAL_STORAGE_KEY,\n      JSON.stringify({ zoom: zoom, center: center, markers: markers })\n    );\n  };\n\n  const setZoom = (_zoom) => {\n    _setZoom(_zoom);\n    updateLocalStorage();\n  };\n\n  const setCenter = (_center) => {\n    _setCenter(_center);\n    updateLocalStorage();\n  };\n\n  const setMarkers = (values) => {\n    _setMarkers(values);\n    updateLocalStorage();\n  };\n\n  const [batchValue, setBatchValue] = React.useState(null);\n  const addMarker = (lat, lng) => {\n    const newMarker = {\n      id: Math.random() * 1000,\n      lat: lat,\n      lng: lng,\n      color: \"red\",\n    };\n    let newMarkersArray = [...markers, newMarker];\n    setMarkers([...newMarkersArray]);\n  };\n  const addMarkers = (valueString) => {\n    if (!valueString) {\n      return;\n    }\n    let markerStrings = valueString.split(\"\\n\");\n    let newMarkersArray = [];\n    markerStrings.forEach((markerString) => {\n      let markerValues = markerString.split(\",\");\n      newMarkersArray.push({\n        id: Math.random() * 1000,\n        lat: parseFloat(markerValues[0]),\n        lng: parseFloat(markerValues[1]),\n        color: markerValues[2] ? markerValues[2] : \"red\",\n      });\n    });\n    setMarkers([...markers, ...newMarkersArray]);\n  };\n  return (\n    <div style={appStyles}>\n      <Map\n        zoom={zoom}\n        center={center}\n        setCenter={setCenter}\n        setZoom={setZoom}\n        addMarker={addMarker}\n        markers={markers}\n        setMarkers={setMarkers}\n        googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyBUjTS_5RvEUsxU3Pq6lya1WHJngcFnieY&v=3.exp&libraries=geometry,drawing,places\"\n        loadingElement={<div style={appStyles} />}\n        containerElement={<div style={appStyles} />}\n        mapElement={<div style={appStyles} />}\n      />\n      <div\n        style={{\n          backgroundColor: \"white\",\n          width: \"10vw\",\n          minWidth: \"15rem\",\n          position: \"absolute\",\n          bottom: \"0\",\n          margin: \"10px\",\n          left: \"0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          textAlign: \"center\",\n          padding: \"1rem\",\n          borderRadius: \"3px\",\n          boxShadow: \"rgb(0 0 0 / 30%) 0px 1px 4px -1px;\",\n        }}\n      >\n        <h2 style={{ marginTop: 0 }}>Batch box</h2>\n        <textarea\n          rows=\"4\"\n          style={{ height: \"10rem\", resize: \"none\", marginBottom: \"1rem\" }}\n          value={batchValue}\n          onChange={(e) => {\n            setBatchValue(e.target.value);\n          }}\n        />\n        <button className=\"google\" onClick={() => addMarkers(batchValue)}>\n          Add\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}